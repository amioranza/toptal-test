name: Release App and Infra Live

on:
  workflow_run:
    workflows: ["Release Base Infra"]
    types:
      - completed

jobs:
  Release_apps:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: set new image tag
        run: |
          echo 'RELEASE_TAG<<EOF' >> $GITHUB_ENV
          git describe --tags --abbrev=0 >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
          echo "New release tag: $RELEASE_TAG"
          echo "GITHUB_REF_NAME: $GITHUB_REF_NAME"

      - name: api image tag
        id: api-image-tag
        run: |
          echo 'API_IMAGE_TAG<<EOF' >> $GITHUB_ENV
          aws ssm get-parameter --name "/application/api/development/docker_tag" --with-decryption | jq -r .Parameter.Value >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
          echo $API_IMAGE_TAG

      - name: tag image as release
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: api
        run: |
          docker pull $REGISTRY/$REPOSITORY:$API_IMAGE_TAG
          docker tag $REGISTRY/$REPOSITORY:$API_IMAGE_TAG $REGISTRY/$REPOSITORY:$RELEASE_TAG
          docker push $REGISTRY/$REPOSITORY:$RELEASE_TAG
          aws ssm put-parameter --name "/application/api/production/docker_tag" --type "SecureString" --value $RELEASE_TAG --overwrite

      - name: web image tag
        id: web-image-tag
        run: |
          echo 'WEB_IMAGE_TAG<<EOF' >> $GITHUB_ENV
          aws ssm get-parameter --name "/application/web/development/docker_tag" --with-decryption | jq -r .Parameter.Value >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
          echo $WEB_IMAGE_TAG

      - name: tag image as release
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: web
        run: |
          docker pull $REGISTRY/$REPOSITORY:$WEB_IMAGE_TAG
          docker tag $REGISTRY/$REPOSITORY:$WEB_IMAGE_TAG $REGISTRY/$REPOSITORY:$RELEASE_TAG
          docker push $REGISTRY/$REPOSITORY:$RELEASE_TAG
          aws ssm put-parameter --name "/application/web/production/docker_tag" --type "SecureString" --value $RELEASE_TAG --overwrite

  Release_Infra:
    runs-on: ubuntu-latest
    needs:
      - Release_apps
    defaults:
      run:
        working-directory: iac/infra-live

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.5

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: false

      - name: Terraform Init
        id: init
        run: terraform init
        env:
          TF_WORKSPACE: production

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        env:
          TF_WORKSPACE: production

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        env:
          TF_WORKSPACE: production
        continue-on-error: false

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve -input=false -no-color
        env:
          TF_WORKSPACE: production
        continue-on-error: false
